// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: chain.sql

package db

import (
	"context"
)

const getChain = `-- name: GetChain :one
SELECT id, name, symbol, rpc, updated_at, created_at
FROM chains
WHERE id = $1 LIMIT 1
`

func (q *Queries) GetChain(ctx context.Context, id string) (Chain, error) {
	row := q.db.QueryRowContext(ctx, getChain, id)
	var i Chain
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Symbol,
		&i.Rpc,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getManyChain = `-- name: GetManyChain :many
SELECT id, name, symbol, rpc, updated_at, created_at
FROM chains
`

func (q *Queries) GetManyChain(ctx context.Context) ([]Chain, error) {
	rows, err := q.db.QueryContext(ctx, getManyChain)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Chain{}
	for rows.Next() {
		var i Chain
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Symbol,
			&i.Rpc,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
