// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.15.0
// source: kafka_dead_queue.sql

package db

import (
	"context"
)

const createKafkaDeadLetter = `-- name: CreateKafkaDeadLetter :one
INSERT INTO kafka_dead_letter_queues (
    id,
    topic,
    value
) VALUES (
    $1, $2, $3
) RETURNING id, topic, value, created_at, updated_at
`

type CreateKafkaDeadLetterParams struct {
	ID    string `json:"id"`
	Topic string `json:"topic"`
	Value string `json:"value"`
}

func (q *Queries) CreateKafkaDeadLetter(ctx context.Context, arg CreateKafkaDeadLetterParams) (KafkaDeadLetterQueue, error) {
	row := q.db.QueryRowContext(ctx, createKafkaDeadLetter, arg.ID, arg.Topic, arg.Value)
	var i KafkaDeadLetterQueue
	err := row.Scan(
		&i.ID,
		&i.Topic,
		&i.Value,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
